{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["symbol","dataUrl","priceUrl","App","useState","loading","data","price","appState","setAppState","useEffect","arr","arr1","fetch","then","response","json","data1","USD","push","res","Data","key","time","close","options","chart","backgroundColor","type","height","title","text","align","plotOptions","series","fillColor","linearGradient","stops","Highcharts","getOptions","colors","color","setOpacity","get","name","value","tooltip","valueDecimals","id","highcharts","constructorType","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAKIA,EAAS,CAAC,OAGVC,EACF,2DACAD,EACA,sBAGEE,EACF,qDAAuDF,EAAS,aAoFnDG,MAlFf,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,SAAS,EACTC,KAAM,KACNC,MAAO,OAJI,mBACNC,EADM,KACIC,EADJ,KAObC,qBAAU,WACRD,EAAY,CAAEJ,SAAS,IACvB,IAAIM,EAAM,GACNC,EAAO,GAEXC,MAAMX,GACHY,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IAAIV,EAAQU,EAAMC,IAClBN,EAAKO,KAAKZ,GAEVM,MAAMZ,GACHa,MAAK,SAACM,GAAD,OAASA,EAAIJ,UAClBF,MAAK,SAACR,GAAU,IAAD,gBACIA,EAAKe,KAAKA,MADd,IACd,2BAAkC,CAAC,IAAxBC,EAAuB,QAC5BhB,EAAO,CAAY,IAAXgB,EAAIC,KAAaD,EAAIE,OACjCb,EAAIQ,KAAKb,IAHG,8BAKdG,EAAY,CAAEJ,SAAS,EAAOC,KAAMK,EAAKJ,MAAOK,YAGvD,CAACH,IAEJ,IAAIH,EAAOE,EAASF,KAChBC,EAAQC,EAASD,MAGfkB,EAAU,CACdC,MAAO,CACLC,gBAAiB,QACjBC,KAAM,OACNC,OAAQ,SAEVC,MAAO,CACLC,KAAK,wBAAD,OAA0B/B,EAA1B,aAAqCO,EAArC,SACJyB,MAAO,QAETC,YAAa,CACXC,OAAQ,CACNC,UAAW,CACTC,eAAgB,CAAC,EAAG,EAAG,EAAG,KAC1BC,MAAO,CACL,CAAC,EAAGC,IAAWC,aAAaC,OAAO,IACnC,CACE,EACAF,IAAWG,MAAMH,IAAWC,aAAaC,OAAO,IAC7CE,WAAW,GACXC,IAAI,aAMjBT,OAAQ,CACN,CACEU,KAAM5C,EAAO6C,MACbvC,KAAMA,EACNwC,QAAS,CACPC,cAAe,MAMvB,OACE,qBAAKC,GAAG,YAAR,SACE,cAAC,IAAD,CACEC,WAAYX,IACZY,gBAAiB,aACjBzB,QAASA,OCjFF0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.970e0579.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nlet symbol = [\"BTC\"];\n\n// Get time series data\nlet dataUrl =\n  \"https://min-api.cryptocompare.com/data/v2/histoday?fsym=\" +\n  symbol +\n  \"&tsym=USD&limit=400\";\n\n// Get current price\nlet priceUrl =\n  \"https://min-api.cryptocompare.com/data/price?fsym=\" + symbol + \"&tsyms=USD\";\n\nfunction App() {\n  const [appState, setAppState] = useState({\n    loading: false,\n    data: null,\n    price: null,\n  });\n\n  useEffect(() => {\n    setAppState({ loading: true });\n    let arr = [];\n    let arr1 = [];\n    // Get price\n    fetch(priceUrl)\n      .then((response) => response.json())\n      .then((data1) => {\n        let price = data1.USD;\n        arr1.push(price);\n        // Get time-series\n        fetch(dataUrl)\n          .then((res) => res.json())\n          .then((data) => {\n            for (const key of data.Data.Data) {\n              let data = [key.time * 1000, key.close];\n              arr.push(data);\n            }\n            setAppState({ loading: false, data: arr, price: arr1 });\n          });\n      });\n  }, [setAppState]);\n\n  let data = appState.data;\n  let price = appState.price;\n  \n\n  const options = {\n    chart: {\n      backgroundColor: \"white\",\n      type: \"area\",\n      height: \"520px\",\n    },\n    title: {\n      text: `<h1 id=\"chart-title\">${symbol} $${price}</h1>`,\n      align: \"left\",\n    },\n    plotOptions: {\n      series: {\n        fillColor: {\n          linearGradient: [0, 0, 0, 300],\n          stops: [\n            [0, Highcharts.getOptions().colors[0]],\n            [\n              1,\n              Highcharts.color(Highcharts.getOptions().colors[0])\n                .setOpacity(0)\n                .get(\"rgba\"),\n            ],\n          ],\n        },\n      },\n    },\n    series: [\n      {\n        name: symbol.value,\n        data: data,\n        tooltip: {\n          valueDecimals: 2,\n        },\n      },\n    ],\n  };\n\n  return (\n    <div id=\"container\">\n      <HighchartsReact\n        highcharts={Highcharts}\n        constructorType={\"stockChart\"}\n        options={options}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}