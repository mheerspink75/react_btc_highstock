{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["symbol","App","useState","loading","data","appState","setAppState","useEffect","arr","fetch","then","res","json","Data","key","time","close","push","options","chart","backgroundColor","type","title","text","align","series","name","tooltip","valueDecimals","id","highcharts","Highcharts","constructorType","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAKIA,EAAS,MA8DEC,MAvDf,WAAgB,IAAD,EACmBC,mBAAS,CACvCC,SAAS,EACTC,KAAM,OAHK,mBACNC,EADM,KACIC,EADJ,KAMbC,qBAAU,WACRD,EAAY,CAAEH,SAAS,IACvB,IAAIK,EAAM,GAEVC,MAdF,kFAeKC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACN,GAAU,IAAD,gBACIA,EAAKS,KAAKA,MADd,IACd,2BAAkC,CAAC,IAAxBC,EAAuB,QAC5BV,EAAO,CAAY,IAAXU,EAAIC,KAAaD,EAAIE,OACjCR,EAAIS,KAAKb,IAHG,8BAKdE,EAAY,CAAEH,SAAS,EAAOC,KAAMI,SAEvC,CAACF,IAEJ,IAAIF,EAAOC,EAASD,KAEdc,EAAU,CACdC,MAAO,CACLC,gBAAiB,QACjBC,KAAM,QAERC,MAAO,CACLC,KAAMvB,EACNwB,MAAO,QAETC,OAAQ,CACN,CACEC,KAAM1B,EACNI,KAAMA,EACNuB,QAAS,CACPC,cAAe,MAMvB,OACE,sBAAKC,GAAG,YAAR,UACE,cAAC,IAAD,CACEC,WAAYC,IACZC,gBAAiB,aACjBd,QAASA,IAEX,qBAAKW,GAAG,UAAR,SAAmBxB,EAAS4B,cClDnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.de50e4f9.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nlet symbol = \"BTC\";\n\nlet dataUrl =\n  \"https://min-api.cryptocompare.com/data/v2/histoday?fsym=\" +\n  symbol +\n  \"&tsym=USD&limit=400\";\n\nfunction App() {\n  const [appState, setAppState] = useState({\n    loading: false,\n    data: null,\n  });\n\n  useEffect(() => {\n    setAppState({ loading: true });\n    let arr = [];\n\n    fetch(dataUrl)\n      .then((res) => res.json())\n      .then((data) => {\n        for (const key of data.Data.Data) {\n          let data = [key.time * 1000, key.close];\n          arr.push(data);\n        }\n        setAppState({ loading: false, data: arr });\n      });\n  }, [setAppState]);\n\n  let data = appState.data;\n\n  const options = {\n    chart: {\n      backgroundColor: \"white\",\n      type: \"line\",\n    },\n    title: {\n      text: symbol,\n      align: \"left\",\n    },\n    series: [\n      {\n        name: symbol,\n        data: data,\n        tooltip: {\n          valueDecimals: 2,\n        },\n      },\n    ],\n  };\n\n  return (\n    <div id=\"container\">\n      <HighchartsReact\n        highcharts={Highcharts}\n        constructorType={\"stockChart\"}\n        options={options}\n      />\n      <div id=\"message\">{appState.message}</div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}